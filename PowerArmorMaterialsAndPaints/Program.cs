using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.FormKeys.Fallout4;
using Mutagen.Bethesda.Plugins;

namespace PowerArmorMaterialsAndPaints
{
    public class Program
    {
        public static Lazy<ModSettings> ModSettings = null!;
        public static List<FormLink<IKeywordGetter>> AttachPoints { get; } = new() { Fallout4.Keyword.ap_PowerArmor_HeadMod, Fallout4.Keyword.ap_PowerArmor_BodyMod, Fallout4.Keyword.ap_PowerArmor_LArmMod, Fallout4.Keyword.ap_PowerArmor_RArmMod, Fallout4.Keyword.ap_PowerArmor_LLegMod, Fallout4.Keyword.ap_PowerArmor_RLegMod };

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
                .SetAutogeneratedSettings("settings", "settings.json", out ModSettings)
                .SetTypicalOpen(GameRelease.Fallout4, "YourPatcher.esp")
                .Run(args);
        }

        public static bool IsPaintMod(IArmorModificationGetter armorModGetter)
        {
            if (armorModGetter.Properties.Any(prop => prop is IObjectModFormLinkIntPropertyGetter<Armor.Property> formIntProp && formIntProp.Record.Equals(Fallout4.Keyword.dn_HasMaterial_Explosives)) ||
            armorModGetter.Properties.Any(prop => prop is IObjectModFormLinkFloatPropertyGetter<Armor.Property> formFloatProp && formFloatProp.Record.Equals(Fallout4.Keyword.dn_HasMaterial_Explosives)))
                return false;

            return ModSettings.Value.MaterialKeywords.Any(mat => mat.Equals(armorModGetter.AttachPoint)) &&
                (armorModGetter.Properties.Any(prop => prop is IObjectModFloatPropertyGetter<Armor.Property> floatProp && floatProp.Property == Armor.Property.ColorRemappingIndex) ||
                armorModGetter.Properties.Any(prop => prop is IObjectModFormLinkIntPropertyGetter<Armor.Property> formIntProp && formIntProp.Property == Armor.Property.MaterialSwaps) ||
                armorModGetter.Properties.Any(prop => prop is IObjectModFormLinkFloatPropertyGetter<Armor.Property> formFloatProp && formFloatProp.Property == Armor.Property.MaterialSwaps));
        }

        public static bool IsPhotovoltaicMod(IArmorModificationGetter armorModGetter)
        {
            return armorModGetter.Properties.Any(prop => prop is IObjectModFormLinkIntPropertyGetter<Armor.Property> formIntProp && formIntProp.Record.Equals(Fallout4.Keyword.dn_HasMaterial_APSunRegen)) ||
                armorModGetter.Properties.Any(prop => prop is IObjectModFormLinkFloatPropertyGetter<Armor.Property> formFloatProp && formFloatProp.Record.Equals(Fallout4.Keyword.dn_HasMaterial_APSunRegen));
        }

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            // Fix object effects
            if (Fallout4.ObjectEffect.EnchPA_Agility.TryResolve(state.LinkCache, out var agilityGetter))
            {
                var objEffSetter = state.PatchMod.ObjectEffects.GetOrAddAsOverride(agilityGetter);
                if (objEffSetter.Effects[0].Conditions[0] is ConditionFloat condFloat)
                {
                    condFloat.CompareOperator = CompareOperator.GreaterThanOrEqualTo;
                    condFloat.ComparisonValue = 5;
                }
            }

            if (Fallout4.ObjectEffect.EnchPA_Charisma.TryResolve(state.LinkCache, out var charismaGetter))
            {
                var objEffSetter = state.PatchMod.ObjectEffects.GetOrAddAsOverride(charismaGetter);
                if (objEffSetter.Effects[0].Conditions[0] is ConditionFloat condFloat)
                {
                    condFloat.CompareOperator = CompareOperator.GreaterThanOrEqualTo;
                    condFloat.ComparisonValue = 5;
                }
            }

            if (Fallout4.ObjectEffect.EnchPA_Intelligence.TryResolve(state.LinkCache, out var intGetter))
            {
                var objEffSetter = state.PatchMod.ObjectEffects.GetOrAddAsOverride(intGetter);
                objEffSetter.Name = "Fortify Intelligence";
                if (objEffSetter.Effects[0].Conditions[0] is ConditionFloat condFloat)
                {
                    condFloat.CompareOperator = CompareOperator.GreaterThanOrEqualTo;
                    condFloat.ComparisonValue = 5;
                }
            }

            if (Fallout4.ObjectEffect.EnchPA_Perception.TryResolve(state.LinkCache, out var perGetter))
            {
                var objEffSetter = state.PatchMod.ObjectEffects.GetOrAddAsOverride(perGetter);
                objEffSetter.Name = "Fortify Perception";
                if (objEffSetter.Effects[0].Conditions[0] is ConditionFloat condFloat)
                {
                    condFloat.CompareOperator = CompareOperator.GreaterThanOrEqualTo;
                    condFloat.ComparisonValue = 5;
                }
            }

            if (Fallout4.ObjectEffect.EnchPA_Strength.TryResolve(state.LinkCache, out var strGetter))
            {
                var objEffSetter = state.PatchMod.ObjectEffects.GetOrAddAsOverride(strGetter);
                if (objEffSetter.Effects[0].Conditions[0] is ConditionFloat condFloat)
                {
                    condFloat.CompareOperator = CompareOperator.GreaterThanOrEqualTo;
                    condFloat.ComparisonValue = 5;
                }
            }

            // Add new keywords
            if (Fallout4.Keyword.ap_PowerArmor_Paint.TryResolve(state.LinkCache, out var keywordGetter))
            {
                var keywordSetter = state.PatchMod.Keywords.GetOrAddAsOverride(keywordGetter);
                keywordSetter.EditorID = "ap_PowerArmor_Material";
            }

            var paintKeyword = state.PatchMod.Keywords.AddNew("ap_PowerArmor_Paint");
            paintKeyword.Name = "Paint";
            paintKeyword.Type = Keyword.TypeEnum.AttachPoint;

            var photocellKeyword = state.PatchMod.Keywords.AddNew("ap_PowerArmor_Photocells");
            photocellKeyword.Name = "Photovoltaic";
            photocellKeyword.Type = Keyword.TypeEnum.AttachPoint;

            // Add new armor mods
            var paintNullMod = new ArmorModification(state.PatchMod, "PA_Paint_Null");
            paintNullMod.FormVersion = 131;
            paintNullMod.AttachPoint = paintKeyword.ToLink();
            paintNullMod.Name = new(Mutagen.Bethesda.Strings.Language.English, "No Paint Mod");
            paintNullMod.Description = new(Mutagen.Bethesda.Strings.Language.English, "");
            state.PatchMod.ObjectModifications.Add(paintNullMod);

            var photocellNullMod = new ArmorModification(state.PatchMod, "PA_Photovoltaic_Null");
            photocellNullMod.FormVersion = 131;
            photocellNullMod.AttachPoint = photocellKeyword.ToLink();
            photocellNullMod.Name = new(Mutagen.Bethesda.Strings.Language.English, "No Photovoltaic Mod");
            photocellNullMod.Description = new(Mutagen.Bethesda.Strings.Language.English, "");
            state.PatchMod.ObjectModifications.Add(photocellNullMod);

            // Add new constructible objects
            var paintNullCO = state.PatchMod.ConstructibleObjects.AddNew("co_PA_Paint_Null");
            paintNullCO.FormVersion = 131;
            paintNullCO.Description = new(Mutagen.Bethesda.Strings.Language.English, "");
            paintNullCO.CreatedObject = paintNullMod.ToNullableLink();
            paintNullCO.CreatedObjectCounts = new();
            paintNullCO.CreatedObjectCounts.Add(new() { Count = 1 });

            var photocellNullCO = state.PatchMod.ConstructibleObjects.AddNew("co_PA_Photovoltaic_Null");
            photocellNullCO.FormVersion = 131;
            photocellNullCO.Description = new(Mutagen.Bethesda.Strings.Language.English, "");
            photocellNullCO.CreatedObject = photocellNullMod.ToNullableLink();
            photocellNullCO.CreatedObjectCounts = new();
            photocellNullCO.CreatedObjectCounts.Add(new() { Count = 1 });

            // Change the armor mods
            foreach (var objModGetter in state.LoadOrder.PriorityOrder.AObjectModification().WinningOverrides())
            {
                if (objModGetter is not IArmorModificationGetter armorModGetter)
                    continue;
                
                // Add new attach points
                if (AttachPoints.Any(point => point.Equals(armorModGetter.AttachPoint)))
                {
                    var armorModSetter = state.PatchMod.ObjectModifications.GetOrAddAsOverride(objModGetter) as ArmorModification;
                    armorModSetter!.AttachParentSlots.Add(paintKeyword.ToLinkGetter());
                    if (armorModGetter.AttachPoint.Equals(Fallout4.Keyword.ap_PowerArmor_HeadMod))
                        armorModSetter.AttachParentSlots.Add(photocellKeyword.ToLinkGetter());
                }

                // Move paints to the paints category
                else if (IsPaintMod(armorModGetter))
                {
                    var armorModSetter = state.PatchMod.ObjectModifications.GetOrAddAsOverride(objModGetter) as ArmorModification;
                    armorModSetter!.AttachPoint = paintKeyword.ToLink();
                }

                // Make photovoltaic mods their own category
                else if (IsPhotovoltaicMod(armorModGetter))
                {
                    var armorModSetter = state.PatchMod.ObjectModifications.GetOrAddAsOverride(objModGetter) as ArmorModification;
                    armorModSetter!.AttachPoint = photocellKeyword.ToLink();
                }
            }
        }
    }
}
